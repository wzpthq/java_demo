/**
 * Classloader的使用
 *
 * 主要目的：
 * 1、了解class的加载过程；
 * 2、classloader 原理；
 * 3、热替换技术；
 *
 *
 * 类加载的过程
 * 1、加载到方法区内存（可以是本地、网络流等），因此有些时候，我们可以通过网络加载，不过一般如果是网络加载的话，需要考虑安全问题；
 * 2、链接 - 验证，如果说一个.class文件加载到了方法区（内存区域），jvm要去运行他的话，肯定要区做一些验证，确保.class文件是合法的，
 *    一般可以验证文件格式验证、元数据验证、字节码验证、符号引用验证等；
 * 3、链接 - 准备，目的是为了类变量分配内存并设置类变量的初始值（方法区中的分配），我们这么来理解这个阶段的事情，首先一个.class文件
 *    验证合法了，那么我们就需要为这个文件中定义的类进行内存分配和变量赋值，但是对于变量而言，有实例变量和静态变量，还有不变变量，
 *    因此我们知道哪些是可以在这个区域进行赋值；
 *    a、static 变量，会赋值默认值；
 *    b、final static 变量，会直接赋值；
 *
 *    需要解决的问题：
 *    1、为啥准备阶段static变量不能直接赋值；
 *    2、为啥准备阶段static final 变量是直接赋值，而不是和static一样；
 *
 *
 * 4、链接 - 解析，将符号引用转换成直接引用；
 *   1、类和接口的解析：判断所要转化的直接引用是对数据类型引用还是普通对象的引用；
 *   2、字段解析：字段解析时，比较复杂，因为字段可能存在重载情况，
 *     查找解析规则是先查找当前接口，然后按照继承关系逐级网上查找；然后再是类，从上往下查找；
 *     current class -> implements interfaces -> extends class
 *
 * 5、初始化，对数据进行初始化处理，执行clinit()的过程
 *
 *
 * ？？？？静态绑定和动态绑定 ？？？？
 *
 *
 *
 *
 *
 */
package study.wzp.data.list.part02.lession05;